RichFaces 4 Archetype

1) Build by running:
    mvn clean install 

*BEFORE NEXT STEP:
  -- You should setup your GAE account at http://appspot.com
  -- Register your new application there.  By default the applications name is "${artifactId}" 
  -- Download and install the GAE SDK for deployment and local server tools 

3) Execute appcfg from GAE SDK to publish to your account:
    appcfg update <PATH: "generated-application-target-folder/output application folder">  

4) Once uploaded, visit your application using http://<application-name>.appspot.com
4.1) check all the information about deployed application at https://appengine.google.com/dashboard?&app_id=<your-application-id>

NOTE:
During build the "org.richfaces.cdk:maven-resource-plugin" executed and generated static resources(web-app\static-resources\) for all skins in order to 
solve the compatibility problem with GAE and java2D API. 

NOTE: about additional artifacts in webapp folder:
1) java-gae-jsf-ri - contains modified WebConfiguration.java class which will be put to Web-inf\classes when building with GAE profile. It solves compatibilities 
issues exist in GAE for JSF applications.

2) Webapp-gae folder contains GAE descriptor(appengine-web.xml) and modified application web.xml. They will be placed in the WEB-INF folder.  The web.xml
is different in order to use static resources generated by plugin instead of dynamic resources. And also restricts threading with 
com.sun.faces.enableThreading context parameter as GAE not allows threads.

============================================================================================================

LOCAL DEPLOYMENTS
To test your application on your local machine you can use GAE SDK development server.  
1) Build archetype as above
2) Navigate GAE SDK /bin
3) Execute"
      ./dev_appserver.sh <PATH: "generated-application-target-folder/output application folder">
4) Once loaded, access your application at http:\\localhost:8080\